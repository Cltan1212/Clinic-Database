/*****PLEASE ENTER YOUR DETAILS BELOW*****/
--T4-pf-mods.sql

--Student ID: 33402973
--Student Name: Tan Chun Ling


/* Comments for your marker:




*/

/*(a)*/
ALTER TABLE service DROP COLUMN total_service_non_std_cost;

-- Initial
SELECT 
    visit_id, service_code, visit_service_linecost, service_std_cost
FROM 
    visit_service
    NATURAL JOIN service
ORDER BY 
    visit_id, service_code;

-- add new column
ALTER TABLE service ADD total_service_non_std_cost NUMBER(3) DEFAULT 0 NOT NULL;

COMMENT ON COLUMN service.total_service_non_std_cost IS 'Total number of service that is not charged at the standard cost';

-- update the column (initialise)
UPDATE service s
SET total_service_non_std_cost = (
    SELECT 
        COUNT(*)
    FROM 
        visit_service vs
    WHERE 
        s.service_code = vs.service_code
        AND vs.visit_service_linecost <> s.service_std_cost
);

-- Show the table structure
DESC service;

-- After changes
SELECT 
    service_code, total_service_non_std_cost
FROM 
    service
ORDER BY 
    service_code;

COMMIT;


/*(b)*/

-- create payment table: visit_payment and payment_method
-- payment_method is a lookup table
DROP TABLE visit_payment    CASCADE CONSTRAINTS PURGE;
DROP TABLE payment_method   CASCADE CONSTRAINTS PURGE;

-- VISIT_PAYMENT
CREATE TABLE visit_payment (
    payment_id          NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    visit_id            NUMBER(5) NOT NULL,
    payment_date_time   DATE NOT NULL,
    payment_amount      NUMBER(6,2) NOT NULL,
    payment_method_id   NUMBER NOT NULL
);

COMMENT ON COLUMN visit_payment.payment_id          IS 'Identifier for payment';
COMMENT ON COLUMN visit_payment.visit_id            IS 'Identifier for visit';
COMMENT ON COLUMN visit_payment.payment_date_time   IS 'Date and time of payment';
COMMENT ON COLUMN visit_payment.payment_amount      IS 'Amount paid in this payment';
COMMENT ON COLUMN visit_payment.payment_method_id   IS 'Method of payment';

ALTER TABLE visit_payment
    ADD CONSTRAINT visit_payment_id_uk UNIQUE ( payment_id, payment_date_time );

ALTER TABLE visit_payment
    ADD CONSTRAINT visit_payment_visit_id_uk UNIQUE ( visit_id, payment_date_time );

ALTER TABLE visit_payment 
    ADD CONSTRAINT visit_payment_fk FOREIGN KEY (visit_id)
        REFERENCES visit (visit_id);

-- PAYMENT_METHOD
CREATE TABLE payment_method (
    payment_method_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    payment_name VARCHAR2(50) NOT NULL
);

COMMENT ON COLUMN payment_method.payment_method_id IS 'payment method id';
COMMENT ON COLUMN payment_method.payment_name IS 'payment method name';

ALTER TABLE visit_payment
    ADD CONSTRAINT payment_method_fk FOREIGN KEY (payment_method_id)
        REFERENCES payment_method (payment_method_id);

INSERT INTO payment_method ( payment_name )
VALUES ( 'Cash' );

INSERT INTO payment_method ( payment_name )
VALUES ( 'Card' );

INSERT INTO payment_method ( payment_name )
VALUES ( 'Historical' );

-- INSERT current data that there is a visit_total_cost 
INSERT INTO visit_payment (visit_id, payment_date_time, payment_amount, payment_method_id)
SELECT 
    visit_id, 
    visit_date_time,
    visit_total_cost, 
    (
        SELECT
            payment_method_id
        FROM 
            payment_method
        WHERE 
            UPPER(payment_name) = UPPER('Historical')
    )
FROM visit
WHERE 
    visit_total_cost IS NOT NULL 
    AND visit_date_time <= SYSDATE; 

DESC visit_payment

SELECT
    visit_id, payment_id, payment_date_time, payment_name
FROM 
    visit_payment
    NATURAL JOIN payment_method;

COMMIT;